#!/bin/sh
# podsite

VERSION='1.0.4'

podsite_main() {
	trap _exit INT TERM

	e_args=16
	e_missing_app=17
	e_cannot_cd=18
	e_missing_dir=19

	_require realpath

	scriptinv="$( basename "$0" )"
	scriptpath="$( realpath "$0" )"
	scriptname="$( basename "$scriptpath" )"
	scriptdir="$( dirname "$scriptpath" )"

	while getopts hv opt
	do
		case $opt in
			h) cmd=help ;;
			v) cmd=version ;;
			*) _invalid_opt ;;
		esac
	done

	shift "$(( OPTIND - 1 ))"

	[ -z "$cmd" ] && cmd="$1"
	shift

	[ -z "$cmd" ] && cmd="help"

	case "$cmd" in
		help|init|unify|version) "podsite_$cmd" "$@" ;;
		*) _invalid_cmd ;;
	esac

	_exit
}

podsite_help() {
cat <<USAGE
$scriptname $VERSION

USAGE:

	$scriptinv [<options>] help
	$scriptinv [<options>] init [<env1>] [<env2>] [<envn>...]
	$scriptinv [<options>] unify [<env>]
	$scriptinv [<options>] version

Manage a "podsite", directory containing multiple "pods",
or small web sites or apps, to be combined into a single
public site directory.

COMMANDS:

	help      Show this help screen.
	init      Initialize podsite for <envs>.
	          (Default: dev production staging test)
	unify     Unify pods into public site for <env>.
	          (Default: dev)
	version   Show script name and version number.

OPTIONS:

	-h        Show this help screen.
	-v        Show script name and version number.

USAGE
}

podsite_init() {
	_mkdir "$scriptdir/common/pods"

	[ $# -lt 1 ] && _init_env_dirs dev production staging test && return

	_init_env_dirs "$@"
}

podsite_unify() {
	env="$1"
	[ -z "$env" ] && env=dev

	[ ! -d "$scriptdir/env/$env/public" ] \
		&& _fatal $e_missing_dir "Missing directory: $scriptdir/env/$env/public"

	PATH="$scriptdir/modules/unidir:$PATH"

	_cd "$scriptdir"

	if [ -d "common/pods" ] && ! _dir_empty "common/pods"
	then
		unidir -f "common/pods"/* "env/$env/public"
	fi

	if [ -d "env/$env/pods" ] && ! _dir_empty "env/$env/pods"
	then
		unidir -f "env/$env/pods"/* "env/$env/public"
	fi

	_cd -
}

podsite_version() {
	_echo "$scriptname $VERSION"
}

_cd() {
	dir="$1"
	cd "$dir" > /dev/null 2>&1 \
		|| _fatal $e_cannot_cd "Cannot change into directory: $dir"
}

_dir_empty() {
	[ "$( ls "$1" 2>/dev/null | wc -l | tr -d ' ' )" = "0" ]
}

_echo() {
	echo "$@"
}

_error() {
	_echo "$@" >&2
}

_exit() {
	exit_code=$?
	exit $exit_code
}

_fatal() {
	exit_code="$1"
	shift
	_error "$@"
	exit "$exit_code"
}

_init_env_dirs() {
	for env in "$@"
	do
		for subdir in pods public
		do
			_mkdir "$scriptdir/env/$env/$subdir"
		done
	done
}

_invalid_cmd() {
	_error "Invalid command: $cmd"
	_echo
	podsite_help
	exit $e_args
}

_invalid_opt() {
	_error "Invalid option: $opt"
	_echo
	podsite_help
	exit $e_args
}

_mkdir() {
	for dir in "$@"
	do
		_echo "$dir"
		[ -d "$dir" ] && continue
		mkdir -p "$dir"
	done
}

_require() {
	missing_bin=0

	for bin in "$@"
	do
		if ! which "$bin" > /dev/null 2>&1
		then
			missing_bin=1
			_error "Required: $bin"
		fi
	done

	if [ $missing_bin -ne 0 ]
	then
		_fatal $e_missing_app "One or more executables or apps are missing."
	fi
}

podsite_main "$@"
