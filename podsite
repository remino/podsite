#!/bin/sh
# podsite
# shellcheck disable=SC2012,SC2317

VERSION='1.2.0'

podsite_main() {
	trap _exit INT TERM

	E_ARGS=16
	E_MISSING_APP=17
	E_CANNOT_CD=18
	E_MISSING_DIR=19
	E_EXISTS=20

	SCRIPT_INV="$( basename "$0" )"
	SCRIPT_PATH="$( readlink -f "$0" )"
	SCRIPT_NAME="$( basename "$SCRIPT_PATH" )"
	SCRIPT_DIR="$( dirname "$SCRIPT_PATH" )"

	while getopts hv opt
	do
		case $opt in
			h) CMD=help ;;
			v) CMD=version ;;
			*) _invalid_opt ;;
		esac
	done

	shift "$(( OPTIND - 1 ))"

	[ -z "$CMD" ] && CMD="$1"
	shift

	[ -z "$CMD" ] && CMD="help"

	case "$CMD" in
		help|init|new|unify|version) "podsite_$CMD" "$@" ;;
		*) _invalid_cmd ;;
	esac

	_exit
}

podsite_help() {
cat <<USAGE
$SCRIPT_NAME $VERSION

USAGE:

	$SCRIPT_INV [<options>] help
	$SCRIPT_INV [<options>] init [<env1>] [<env2>] [<envn>...]
	$SCRIPT_INV [<options>] new <dir> [<env1>] [<env2>] [<envn>...]
	$SCRIPT_INV [<options>] unify [<env>]
	$SCRIPT_INV [<options>] version

Manage a "podsite", directory containing multiple "pods",
or small web sites or apps, to be combined into a single
public site directory.

COMMANDS:

	help      Show this help screen.
	init      Initialize podsite for <envs>.
	          (Default: dev production staging test)
	new       Create new podsite and initialize for <envs>.
	          (Default: dev production staging test)
	unify     Unify pods into public site for <env>.
	          (Default: dev)
	version   Show script name and version number.

OPTIONS:

	-h        Show this help screen.
	-v        Show script name and version number.

USAGE
}

podsite_init() {
	_mkdir "$SCRIPT_DIR/common/pods"

	[ $# -lt 1 ] && _init_env_dirs dev production staging test && return

	_init_env_dirs "$@"
}

podsite_new() {
	[ $# -lt 1 ] && _fatal "$E_ARGS" "Must specify directory."

	dir="$1"
	[ -d "$dir" ] && _fatal "$E_EXISTS" "Directory already exists: $dir"
	shift

	git clone --recursive https://github.com/remino/podsite "$dir"
	cd "$dir" || _fatal "$E_CANNOT_CD" "Failed to cd to: $dir"

	./podsite init "$@"
}

podsite_unify() {
	env="$1"
	[ -z "$env" ] && env=dev

	[ ! -d "$SCRIPT_DIR/env/$env/public" ] \
		&& _fatal "$E_MISSING_DIR" "Missing directory: $SCRIPT_DIR/env/$env/public"

	PATH="$SCRIPT_DIR/modules/unidir:$PATH"

	_cd "$SCRIPT_DIR"

	target="env/$env/public"

	_unify_into_target "$target"

	find "$target" -maxdepth 1 -mindepth 1 -type d -not -iname '.*' \
		| while read -r dirpath
	do
		_unify_into_target "$target" "$( basename "$dirpath" )"
	done

	_cd -
}

podsite_version() {
	_echo "$SCRIPT_NAME $VERSION"
}

_cd() {
	dir="$1"
	cd "$dir" > /dev/null 2>&1 \
		|| _fatal "$E_CANNOT_CD" "Cannot change into directory: $dir"
}

_dir_empty() {
	[ "$( ls "$1" 2>/dev/null | wc -l | tr -d ' ' )" = "0" ]
}

_echo() {
	echo "$@"
}

_error() {
	_echo "$@" >&2
}

_exit() {
	exit_code=$?
	exit $exit_code
}

_fatal() {
	exit_code="$1"
	shift
	_error "$@"
	exit "$exit_code"
}

_init_env_dirs() {
	for env in "$@"
	do
		for subdir in pods public
		do
			_mkdir "$SCRIPT_DIR/env/$env/$subdir/public"
		done
	done
}

_invalid_cmd() {
	_error "Invalid command: $CMD"
	_echo
	podsite_help
	exit $E_ARGS
}

_invalid_opt() {
	_error "Invalid option: $opt"
	_echo
	podsite_help
	exit $E_ARGS
}

_mkdir() {
	for dir in "$@"
	do
		_echo "$dir"
		[ -d "$dir" ] && continue
		mkdir -p "$dir"
	done
}

_require() {
	missing_bin=0

	for bin in "$@"
	do
		if ! which "$bin" > /dev/null 2>&1
		then
			missing_bin=1
			_error "Required: $bin"
		fi
	done

	if [ "$missing_bin" -ne 0 ]
	then
		_fatal "$E_MISSING_APP" "One or more executables or apps are missing."
	fi
}

_unify_into_target() {
	target="$1"
	subdir="$2"

	subpath="/public"
	subtarget="$target"

	if [ -n "$subdir" ]
	then
		subpath="$subpath/$subdir"
		subtarget="$subtarget/$subdir"
	fi

	if [ -d "common/pods" ] && ! _dir_empty "common/pods"
	then
		if [ "$( ls "common/pods"/*"$subpath" 2>/dev/null | wc -l )" -gt 0 ]
		then
			unidir -f "common/pods"/*"$subpath" "$subtarget"
		fi
	fi

	if [ -d "env/$env/pods" ] && ! _dir_empty "env/$env/pods"
	then
		if [ "$( ls "env/$env/pods"/*"$subpath" 2>/dev/null | wc -l )" -gt 0 ]
		then
			unidir -f "env/$env/pods"/*"$subpath" "$subtarget"
		fi
	fi
}

podsite_main "$@"
